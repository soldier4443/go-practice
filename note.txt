Go

## 코드 구조

Workspace > Repository > packages > Go file

root 디렉토리에 src, pkg, bin 디렉토리가 있으면 workspace.
go tool을 통해서 src의 소스를 빌드해서 pkg와 bin에 생성함

src -> 소스
pkg -> 라이브러리?
bin -> 실행 파일

한 패키지 내의 모든 파일은 동일한 패키지 이름을 써야함.
import path의 마지막 이름을 주로 사용한다고 함
> "crypto/rot13" -> rot13

Executable일 경우 **반드시** main package

독특한 package 시스템!
package가 곧 저장소의 url이 됨
ex) https://github.com/soldier443/hello에 저장소가 있으면
go get github.com/soldier4443/hello로 원격 소스를 받아서 install할 수 있음
-> git clone과 유사하고 간편?
-> 다른 go package들을 아주 쉽게 가져다 쓸 수 있게 됨!


## 명령어

  go build
build package

  go install
build package and generate output file
also install other dependencies

  go get
download remote package and build?

정적 타입 언어
-> 타입이 달라지지 않음

import를 할 때는 "", 여러 개를 할 때는 () 안에 "",
서브 패키지는 /로 구분

ex) "fmt", "math/rand"

main 패키지가 아닌 것은 실행할 수 없다.

전체적으로 C+++++++++같은 느낌?

Composite literal에서는 마지막 라인에도 ,가 있어야 함..?


## Private / Public

first letter, 첫 글자에 따라서 private/public 결정.
print - private
Print - public

## Pointer

- &: 주소
- *: 주소에 있는 값

## Struct

연관된 값들을 모아놓을 수 있음

type ~~~ struct {
  a unit16
  b float32
  ...
}

#### 메소드?